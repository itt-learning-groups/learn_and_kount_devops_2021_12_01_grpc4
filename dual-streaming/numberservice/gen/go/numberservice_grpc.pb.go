// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package numberservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberServiceClient is the client API for NumberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberServiceClient interface {
	GetSquares(ctx context.Context, opts ...grpc.CallOption) (NumberService_GetSquaresClient, error)
}

type numberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberServiceClient(cc grpc.ClientConnInterface) NumberServiceClient {
	return &numberServiceClient{cc}
}

func (c *numberServiceClient) GetSquares(ctx context.Context, opts ...grpc.CallOption) (NumberService_GetSquaresClient, error) {
	stream, err := c.cc.NewStream(ctx, &NumberService_ServiceDesc.Streams[0], "/numberservice.NumberService/GetSquares", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberServiceGetSquaresClient{stream}
	return x, nil
}

type NumberService_GetSquaresClient interface {
	Send(*GetSquaresRequest) error
	Recv() (*GetSquaresResponse, error)
	grpc.ClientStream
}

type numberServiceGetSquaresClient struct {
	grpc.ClientStream
}

func (x *numberServiceGetSquaresClient) Send(m *GetSquaresRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *numberServiceGetSquaresClient) Recv() (*GetSquaresResponse, error) {
	m := new(GetSquaresResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberServiceServer is the server API for NumberService service.
// All implementations must embed UnimplementedNumberServiceServer
// for forward compatibility
type NumberServiceServer interface {
	GetSquares(NumberService_GetSquaresServer) error
	mustEmbedUnimplementedNumberServiceServer()
}

// UnimplementedNumberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNumberServiceServer struct {
}

func (UnimplementedNumberServiceServer) GetSquares(NumberService_GetSquaresServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSquares not implemented")
}
func (UnimplementedNumberServiceServer) mustEmbedUnimplementedNumberServiceServer() {}

// UnsafeNumberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberServiceServer will
// result in compilation errors.
type UnsafeNumberServiceServer interface {
	mustEmbedUnimplementedNumberServiceServer()
}

func RegisterNumberServiceServer(s grpc.ServiceRegistrar, srv NumberServiceServer) {
	s.RegisterService(&NumberService_ServiceDesc, srv)
}

func _NumberService_GetSquares_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NumberServiceServer).GetSquares(&numberServiceGetSquaresServer{stream})
}

type NumberService_GetSquaresServer interface {
	Send(*GetSquaresResponse) error
	Recv() (*GetSquaresRequest, error)
	grpc.ServerStream
}

type numberServiceGetSquaresServer struct {
	grpc.ServerStream
}

func (x *numberServiceGetSquaresServer) Send(m *GetSquaresResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *numberServiceGetSquaresServer) Recv() (*GetSquaresRequest, error) {
	m := new(GetSquaresRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberService_ServiceDesc is the grpc.ServiceDesc for NumberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "numberservice.NumberService",
	HandlerType: (*NumberServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSquares",
			Handler:       _NumberService_GetSquares_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "numberservice.proto",
}
